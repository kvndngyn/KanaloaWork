// Generated by gencpp from file way_point_wamv/way_point_cmdResponse.msg
// DO NOT EDIT!


#ifndef WAY_POINT_WAMV_MESSAGE_WAY_POINT_CMDRESPONSE_H
#define WAY_POINT_WAMV_MESSAGE_WAY_POINT_CMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace way_point_wamv
{
template <class ContainerAllocator>
struct way_point_cmdResponse_
{
  typedef way_point_cmdResponse_<ContainerAllocator> Type;

  way_point_cmdResponse_()
    : recieved(false)  {
    }
  way_point_cmdResponse_(const ContainerAllocator& _alloc)
    : recieved(false)  {
  (void)_alloc;
    }



   typedef uint8_t _recieved_type;
  _recieved_type recieved;





  typedef boost::shared_ptr< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct way_point_cmdResponse_

typedef ::way_point_wamv::way_point_cmdResponse_<std::allocator<void> > way_point_cmdResponse;

typedef boost::shared_ptr< ::way_point_wamv::way_point_cmdResponse > way_point_cmdResponsePtr;
typedef boost::shared_ptr< ::way_point_wamv::way_point_cmdResponse const> way_point_cmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator1> & lhs, const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.recieved == rhs.recieved;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator1> & lhs, const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace way_point_wamv

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dab0b7be2e21c7e76041e8de101b25f";
  }

  static const char* value(const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dab0b7be2e21c7eULL;
  static const uint64_t static_value2 = 0x76041e8de101b25fULL;
};

template<class ContainerAllocator>
struct DataType< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "way_point_wamv/way_point_cmdResponse";
  }

  static const char* value(const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool recieved\n"
"\n"
;
  }

  static const char* value(const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.recieved);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct way_point_cmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::way_point_wamv::way_point_cmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "recieved: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recieved);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAY_POINT_WAMV_MESSAGE_WAY_POINT_CMDRESPONSE_H
